# Flutter项目Cursor规则

## 项目概述
这是一个Flutter移动应用项目，使用Dart语言开发，采用分层架构模式，注重用户使用体验。主要功能为剪藏、收藏与笔记阅读软件

## 代码风格和格式化

### Dart代码风格
- 使用2个空格缩进
- 类名使用PascalCase（如：CustomerIndexPage）
- 变量和方法名使用camelCase（如：loadMoreData）
- 常量使用kLowerCamelCase（如：kBuryingPointUid）
- 文件名使用snake_case（如：customer_index_page.dart）
- 私有成员使用下划线前缀（如：_pagingController）

### 导入规则
- Flutter SDK导入放在最前面
- 第三方包导入放在中间
- 项目内部导入放在最后
- 相对路径导入使用相对路径（../../../）
- 导入语句按字母顺序排列

### 代码组织
- 每个文件最多包含一个主要的公共类
- 使用mixin来分离业务逻辑（如：CustomerIndexPageBLoC）
- 私有方法放在公共方法之后
- 生命周期方法按标准顺序排列（initState, build, dispose）

## 架构模式

### 目录结构
```
lib/
├── api/              # API接口层
├── basics/           # 基础工具类
├── components/       # 可复用组件
├── controller/       # 控制器
├── route/           # 路由配置
├── view/            # 视图层
│   └── base/        # 基础业务模块
└── main.dart        # 应用入口
```

### 页面结构模式
- 页面类继承StatefulWidget
- 使用mixin分离业务逻辑（BLoC模式）
- 状态管理使用setState或GetX
- 页面间导航使用go_router

### 数据模型
- 模型类放在对应页面的models目录下
- 使用fromJson和toJson方法进行序列化
- 模型类名以Model结尾（如：CustomerListModel）

## UI组件规范

### 布局组件
- 优先使用Column、Row进行布局
- 使用Container进行装饰和间距控制
- 使用Expanded、Flexible处理弹性布局
- 使用SizedBox进行固定间距

### 样式规范
- 圆角使用BorderRadius.circular()
- 阴影效果使用BoxShadow
- 需要注意要适配主题

### 交互组件
- 点击事件使用GestureDetector包装
- 列表使用PagedListView实现分页
- 搜索功能使用InputSearchWidget
- 加载状态使用EasyLoading
- 日志打印使用getLogger()

## 状态管理

### 页面状态
- 使用StatefulWidget + mixin模式
- 状态变量声明在mixin中
- 使用setState()更新UI
- 生命周期管理在mixin中处理

### 数据获取
- API调用放在mixin的方法中
- 使用async/await处理异步操作
- 错误处理使用try-catch
- 加载状态使用布尔变量控制

## 网络请求

### API调用
- 请求参数使用Map<String, dynamic>
- 响应数据检查code字段
- 错误信息使用EasyLoading.showError显示

### 分页处理
- 使用PagingController管理分页状态
- 页面大小设置为20
- 实现下拉刷新和上拉加载更多
- 处理最后一页的情况

## 路由导航

### 路由配置
- 使用go_router进行路由管理
- 路由名称定义在RouteName类中
- 页面跳转使用context.push()
- 返回结果使用context.pop()

### 页面传参
- 简单参数通过URL查询参数传递
- 复杂对象通过路由extra参数传递
- 页面返回值用于刷新列表数据

## 性能优化

### 列表优化
- 使用PagedListView实现虚拟滚动
- 图片使用cached_network_image缓存
- 避免在build方法中创建复杂对象
- 使用const构造函数优化widget

### 内存管理
- 在dispose方法中释放资源
- PagingController需要手动dispose
- 取消未完成的网络请求
- 移除事件监听器

## 错误处理

### 异常捕获
- 网络请求使用try-catch包装
- 记录错误日志使用getLogger()
- 用户友好的错误提示
- 避免应用崩溃

### 日志记录
- 使用ClientLog进行埋点统计
- 页面访问记录buryingPoint
- 错误信息记录到日志系统
- 调试信息使用logger包

## 国际化

### 文本处理
- 界面文本使用中文
- 硬编码文本需要提取到常量
- 考虑后续国际化需求
- 时间格式使用intl包处理

## 测试规范

### 单元测试
- 业务逻辑方法编写单元测试
- 模型类序列化测试
- API接口mock测试
- 工具类方法测试

### Widget测试
- 关键页面编写widget测试
- 用户交互流程测试
- 状态变化测试
- 导航跳转测试

## 代码质量

### 代码检查
- 遵循flutter_lints规则
- 使用flutter analyze检查代码
- 修复所有warning和error
- 保持代码格式一致

### 最佳实践
- 方法长度不超过50行
- 类长度不超过500行
- 避免深层嵌套（最多3层）
- 使用有意义的变量名

## 依赖管理

### 包版本
- 使用pubspec.yaml管理依赖
- 固定主要版本号避免破坏性更新
- 定期更新依赖包版本
- 移除未使用的依赖

### 常用包
- go_router: 路由管理
- dio: 网络请求
- flutter_easyloading: 加载提示
- infinite_scroll_pagination: 分页列表
- shared_preferences: 本地存储

## 安全规范

### 数据安全
- 敏感信息不要硬编码
- API密钥使用环境变量
- 用户数据加密存储
- 网络请求使用HTTPS

### 权限管理
- 最小权限原则
- 运行时权限申请
- 权限拒绝的处理
- 隐私政策合规

## 发布规范

### 版本管理
- 使用语义化版本号
- 更新pubspec.yaml版本
- 编写版本更新日志
- 标记Git版本标签

### 构建配置
- 区分debug和release配置
- 代码混淆和压缩
- 资源文件优化
- 签名配置管理

记住：始终优先考虑代码的可读性、可维护性和性能。遵循Flutter官方最佳实践，保持代码风格一致性。 